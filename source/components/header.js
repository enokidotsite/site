var Nanocomponent = require('nanocomponent')
var Moire = require('./moire')
var raw = require('choo/html/raw')
var md = require('nano-markdown')
var html = require('choo/html')

var moire = new Moire()

module.exports = class Header extends Nanocomponent {
  constructor () {
    super()

    this.observer
    this.frame
    this.state = {
      title: '',
      target: [1, 0, -0.5],
      unit: [1, 0, -0.5],
      img: {
        loaded: false,
        src: '/assets/ui.svg'
      }
    }

    this.handleIntersection = this.handleIntersection.bind(this)
    this.createFrame = this.createFrame.bind(this)
    this.handleMove = this.handleMove.bind(this)
  }

  load (element) {
    var self = this

    if (typeof IntersectionObserver === 'undefined') return

    // track position
    this.observer = new IntersectionObserver(this.handleIntersection)
    this.observer.observe(element)
  }

  unload (element) {
    if (typeof IntersectionObserver === 'undefined') return
    this.observer.disconnect()
  }

  createElement (props) {
    this.state = Object.assign(this.state, props)

    return html`
      <header>
        <div class="colors">
          <div></div>
          <div></div>
          <div></div>
          <div></div>
          <div></div>
          <div></div>
        </div>
        <svg width="810px" height="222px" viewBox="0 0 810 222" version="1.1" style="mix-blend-mode: exclusion">
          <path d="M127.168067,124.680672 C126.753499,120.327709 125.509814,116.182093 123.436975,112.243697 C121.364135,108.305302 118.617664,104.833348 115.197479,101.827731 C111.777294,98.8221138 107.735317,96.4383842 103.071429,94.6764706 C98.4075397,92.914557 93.1736985,92.0336134 87.3697479,92.0336134 C80.5293776,92.0336134 74.466413,92.9663772 69.1806723,94.8319328 C63.8949316,96.6974883 59.3865733,99.1330382 55.6554622,102.138655 C51.9243511,105.144273 49.0224193,108.616227 46.9495798,112.554622 C44.8767403,116.493017 43.5294149,120.534993 42.907563,124.680672 L127.168067,124.680672 Z M170.386555,168.210084 C167.899147,178.159714 164.168092,186.554588 159.193277,193.394958 C154.218463,200.235328 148.155498,205.780091 141.004202,210.029412 C133.852905,214.278733 125.768953,217.336125 116.752101,219.201681 C107.735249,221.067236 98.1485102,222 87.9915966,222 C72.6525844,222 59.4384308,219.979012 48.3487395,215.936975 C37.2590482,211.894938 28.1386912,206.350175 20.987395,199.302521 C13.8360987,192.254867 8.55043727,183.911813 5.1302521,174.273109 C1.71006693,164.634406 0,154.114903 0,142.714286 C0,129.240829 2.12462861,117.529462 6.37394958,107.579832 C10.6232705,97.6302024 16.5307745,89.3907889 24.0966387,82.8613445 C31.6625028,76.3319001 40.83468,71.4608004 51.6134454,68.2478992 C62.3922108,65.0349979 74.3108591,63.4285714 87.3697479,63.4285714 C99.8067849,63.4285714 111.155411,65.0868182 121.415966,68.4033613 C131.676522,71.7199045 140.434137,76.6428245 147.689076,83.1722689 C154.944014,89.7017133 160.540597,97.8893065 164.478992,107.735294 C168.417387,117.581282 170.386555,129.033548 170.386555,142.092437 L170.386555,152.97479 L42.2857143,152.97479 C42.9075661,158.364173 44.1512512,163.442553 46.0168067,168.210084 C47.8823623,172.977615 50.6288334,177.175052 54.2563025,180.802521 C57.8837716,184.42999 62.4439501,187.280102 67.9369748,189.352941 C73.4299995,191.425781 80.1148066,192.462185 87.9915966,192.462185 C109.341843,192.462185 122.504177,184.378232 127.478992,168.210084 L170.386555,168.210084 Z M234.725702,66.2268908 L234.725702,81.1512605 C240.529653,74.7254581 247.836302,70.1134594 256.64587,67.3151261 C265.455438,64.5167927 274.005773,63.1176471 282.297131,63.1176471 C305.927501,63.1176471 324.686417,67.5741851 338.574442,76.487395 C352.462466,85.4006048 359.406374,99.7029828 359.406374,119.394958 L359.406374,218.890756 L318.364358,218.890756 L318.364358,121.260504 C318.364358,116.700257 317.276133,112.606461 315.099652,108.978992 C312.92317,105.351522 309.969418,102.29413 306.238307,99.8067227 C302.507196,97.3193153 298.154298,95.4019675 293.179484,94.0546218 C288.204669,92.7072762 282.919007,92.0336134 277.322341,92.0336134 C265.299872,92.0336134 255.454032,94.9355452 247.784526,100.739496 C240.11502,106.543446 236.280324,114.627399 236.280324,124.991597 L236.280324,218.890756 L195.238307,218.890756 L195.238307,66.2268908 L234.725702,66.2268908 Z M470.346102,63.4285714 C485.270546,63.4285714 498.225599,65.3459192 509.211648,69.1806723 C520.197697,73.0154253 529.214414,78.4047272 536.262068,85.3487395 C543.309722,92.2927518 548.543564,100.583985 551.963749,110.222689 C555.383934,119.861393 557.094001,130.588176 557.094001,142.403361 C557.094001,167.899287 549.890992,187.539147 535.484757,201.323529 C521.078523,215.107912 499.365855,222 470.346102,222 C441.533633,222 419.820965,215.107912 405.207446,201.323529 C390.593928,187.539147 383.287278,167.899287 383.287278,142.403361 C383.287278,130.588176 384.997345,119.861393 388.41753,110.222689 C391.837715,100.583985 397.123377,92.2927518 404.274673,85.3487395 C411.425969,78.4047272 420.494506,73.0154253 431.480555,69.1806723 C442.466605,65.3459192 455.421657,63.4285714 470.346102,63.4285714 Z M470.346102,92.0336134 C462.262028,92.0336134 455.36994,93.4327591 449.669631,96.2310924 C443.969323,99.0294258 439.305504,102.812301 435.678034,107.579832 C432.050565,112.347363 429.407735,117.788485 427.749463,123.903361 C426.091191,130.018238 425.262068,136.288483 425.262068,142.714286 C425.262068,149.140088 426.091191,155.358513 427.749463,161.369748 C429.407735,167.380982 432.050565,172.666644 435.678034,177.226891 C439.305504,181.787138 443.969323,185.466373 449.669631,188.264706 C455.36994,191.063039 462.262028,192.462185 470.346102,192.462185 C478.430176,192.462185 485.322264,191.063039 491.022572,188.264706 C496.722881,185.466373 501.3867,181.787138 505.014169,177.226891 C508.641638,172.666644 511.284469,167.380982 512.94274,161.369748 C514.601012,155.358513 515.430135,149.140088 515.430135,142.714286 C515.430135,136.288483 514.601012,130.018238 512.94274,123.903361 C511.284469,117.788485 508.641638,112.347363 505.014169,107.579832 C501.3867,102.812301 496.722881,99.0294258 491.022572,96.2310924 C485.322264,93.4327591 478.430176,92.0336134 470.346102,92.0336134 Z M643.159779,159.504202 L622.016921,177.226891 L622.016921,218.890756 L580.974905,218.890756 L580.974905,3.42016807 L622.016921,3.42016807 L622.016921,130.588235 L696.016921,66.2268908 L750.73961,66.2268908 L671.764821,133.386555 C677.776055,140.019641 684.149941,146.963549 690.886669,154.218487 C697.623398,161.473426 704.411845,168.831895 711.252216,176.294118 C718.092586,183.75634 724.777393,191.11481 731.306837,198.369748 C737.836282,205.624686 744.002887,212.464954 749.806837,218.890756 L699.126165,218.890756 L643.159779,159.504202 Z M767.704027,218.890756 L767.704027,66.2268908 L808.746043,66.2268908 L808.746043,218.890756 L767.704027,218.890756 Z M766.771253,37 L766.771253,0 L809.989741,0 L809.989741,37 L766.771253,37 Z" id="enoki" fill="#fff">
        </svg>
        ${moire.render({
          unit: this.state.unit
        })}
      </header>
    `
  }

  update (props) {
    return false
  }

  createFrame () {
    var diff = this.state.target[0] - this.state.unit[0]
    var diffx = this.state.target[1] - this.state.unit[1]
    var diffy = this.state.target[2] - this.state.unit[2]
    this.state.unit[0] += diff * 0.1
    this.state.unit[1] += (diffx * 0.1) / 2
    this.state.unit[2] += (diffy * 0.1) / 2
    this.element.style.setProperty('--unit', this.state.unit[0])
    this.element.style.setProperty('--unitx', this.state.unit[1])
    this.element.style.setProperty('--unity', this.state.unit[2])
    moire.refresh({ unit: this.state.unit })
    this.frame = window.requestAnimationFrame(this.createFrame)
  }

  handleMove (event) {
    var width = window.innerWidth / 2
    var height = window.innerHeight * 0.9
    var x = (event.clientX - width) / width
    var y = (event.clientY - height) / height
    var unit = [Math.sqrt(x * x + y * y), x, y]
    this.state.target = unit
  }

  handleIntersection (event) {
    if (event[0].isIntersecting) {
      this.createFrame()
      window.addEventListener('mousemove', this.handleMove, false)
    } else {
      window.cancelAnimationFrame(this.frame)
      window.removeEventListener('mousemove', this.handleMove, false)
    }
  }
}

function breakText (str) {
  str = str || ''
  return str.replace(/(?:\r\n|\r|\n)/g, '<br>')
}
